import sqlite3

def init_db():
    conn = sqlite3.connect("premiums.db")
    cursor = conn.cursor()
    
    # Создаем таблицу, если она еще не существует
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS premiums (
            tab_number INTEGER PRIMARY KEY,
            premium REAL NOT NULL
        )
    """)
    
    # Данные о премиях (старые + новые)
    premium_data = [
        (77815, 5011),
        (77816, 6846),
        (77817, 6557),
        (77819, 5897),
        (77818, 4487),
        (77814, 3613),
        (77820, 759),
        (77694, 2050),
        (77690, 5031),
        (77408, 5815),
        (77527, 3299),
        (77777, 7114),
        (77396, 7897),
        (77393, 7073),
        (77243, 1593),
        (77295, 2867),
        (77701, 5238),
        (77409, 4289),
        (77704, 7155),
        (76523, 4682),
        (76501, 2755),
        (77007, 5643),
        (77054, 1873),
        (76856, 2145),
        (77032, 6188),
        (77027, 2450),
        (76865, 5154),
        (76517, 2907),
        (77024, 2564),
        (76023, 5114),
        (51466, 3700),
        (64285, 1318),
        (51444, 11392),
        (68968, 5209),
        (40641, 1511),
        (3522, 2005),
        (33678, 1188),
        (51434, 5773),
        (56180, 8858),
        (31029, 5042),
        (64948, 9472),
        (64742, 10042),
        (24558, 9374),
        (69032, 0),
        (61249, 5475),
        (59251, 3066),
        (29554, 2042),
        (20017, 9925),
        (55795, 9337),
        (34689, 2963),
        (15800, 10312),
        (56186, 10278),
        (45783, 6860),
        (48785, 7028),
        (24412, 11871),
        (21882, 8908),
        (51142, 3176),
        (65238, 1238),
        (70620, 1238),
        (75827, 1485),
        (76897, 2104),
        (75856, 1361),
        (75857, 1691),
        (75855, 1650),
        (75828, 330),
        (75860, 1073),
        (50219, 3464),
        (56982, 6235),
        (75871, 1485),
        (76366, 537),
        (78261, 1178),
        (78217, 1571),
        (52795, 2970),
        (73211, 1223),
        (70769, 899),
        (74214, 990),
        (71598, 6625),
        (71765, 3240),
        (74225, 4151),
        (66232, 9554),
        (76168, 5803),
        (47849, 3272),
        (70512, 10792),
        (71337, 3695),
        (70316, 1361),
        (72898, 7783),
        (71341, 706),
        (72893, 2359),
        (72743, 4674),
        (73030, 1101),
        (72566, 3810),
        (54985, 6682),
        (74052, 942),
        (75795, 7712),
        (69686, 1217),
        (72732, 0),
        (71040, 1003),
        (72564, 2052),
        (71586, 2914),
        (69637, 3590),
        (19987, 3378),
        (68006, 9050.4),
        (70099, 2341),
        (73768, 7206),
        (70734, 6253.2),
        (73489, 4518),
        (70108, 6142),
        (74027, 1384),
        (64279, 1106),
        (69772, 2874),
        (67763, 4122.5),
        (70104, 8469),
        (69774, 2296.7),
        (16782, 4865.4),
        (41788, 6885),
        (70106, 9050.4),
        (68979, 6402.6),
        (73244, 8839.8),
        (70382, 6764.4),
        (49805, 10024.9),
        (73009, 4913),
        (12574, 8107.3),
        (53193, 9621),
        (53168, 7585.4),
        (35905, 4309.2),
        (74207, 4872),
        (51720, 12359),
        (61718, 9275.2),
        (37323, 5185),
        (69968, 8337.6),
        (51772, 10207.8),
        (69031, 7234.2),
        (73777, 1648),
        (3576, 4606.2),
        (69799, 4824),
        (68077, 12738.6),
        (73204, 1452.6),
        (48491, 3519.9),
        (50355, 0),
        (67740, 3729),
        (72108, 6602),
        (70529, 3806),
        (71721, 0),
        (77547, 2886.3),
        (73781, 0),
        (71732, 0),
        (72298, 4143),
        (70871, 881),
        (77546, 7300),
        (61335, 3962),
        (62775, 2072),
        (70888, 1916),
        (48695, 888.3),
        (71731, 4997),
        (29748, 14732.2),
        (17939, 8908),
        (27288, 15571.136),
        (54750, 14751.692),
        (52771, 16902.945),
        (37357, 6066),
        (18435, 18541.833),
        (35576, 5361),
        (52945, 6167.6),
        (33412, 9593.1),
        (19749, 12333.5),
        (3886, 16902.945),
        (13059, 17734.245),
        (15803, 18916.168),
        (37514, 15960.6),
        (10186, 9432),
        (28367, 9975.6),
        (3881, 15477.192),
        (33417, 14963.4),
        (36088, 15960.6),
        (10800, 18165.017),
        (28041, 14963.4),
        (14775, 14963.4),
        (37513, 13059),
        (76757, 3265.2),
        (11066, 14963.4),
        (76898, 5169.6),
        (68072, 6802.2),
        (1565, 19024.761),
        (3865, 15477.192),
        (3210, 13059),
        (25862, 8196),
        (14768, 15477.192),
        (15706, 14751.692),
        (9054, 12897.96),
        (3834, 15477.192),
        (37755, 16874.501),
        (3064, 19238.347),
        (26980, 9458.984)
    ]
    
    # Вставляем данные, если таблица пуста
    cursor.execute("SELECT COUNT(*) FROM premiums")
    if cursor.fetchone()[0] == 0:
        cursor.executemany("INSERT INTO premiums (tab_number, premium) VALUES (?, ?)", premium_data)
    
    conn.commit()
    conn.close()

def get_premium(tab_number):
    conn = sqlite3.connect("premiums.db")
    cursor = conn.cursor()
    
    cursor.execute("SELECT premium FROM premiums WHERE tab_number = ?", (tab_number,))
    result = cursor.fetchone()
    
    conn.close()
    return result[0] if result else None
