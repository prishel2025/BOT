import sqlite3
from datetime import datetime, timedelta

def init_db():
    conn = sqlite3.connect("premiums.db")
    cursor = conn.cursor()
    
    # Создаем таблицу премий, если она еще не существует
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS premiums (
            tab_number INTEGER PRIMARY KEY,
            premium REAL NOT NULL
        )
    """)
    
    # Создаем таблицу для отслеживания запросов
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS lookup_limits (
            tab_number INTEGER,
            lookup_count INTEGER DEFAULT 0,
            last_reset DATE,
            PRIMARY KEY (tab_number)
        )
    """)
    
    # Данные о премиях (новые данные)
    premium_data = [
        (77818, 4487),
        (77408, 5815),
        (77527, 3299),
        (77777, 7114),
        (77396, 7897),
        (77393, 7073),
        (77243, 1593),
        (77295, 2867),
        (77701, 5238),
        (77409, 4289),
        (76523, 4682),
        (76501, 2755),
        (77007, 5643),
        (77054, 4119),
        (76856, 2145),
        (77032, 6188),
        (77027, 2450),
        (76865, 5154),
        (76517, 2907),
        (77024, 2564),
        (76023, 5114),
        (55795, 11794),
        (51142, 3176),
        (61249, 15511),
        (65238, 1238),
        (24558, 11841),
        (31029, 10954),
        (75827, 1485),
        (76897, 2104),
        (69032, 7127),
        (68968, 7894),
        (56186, 12847),
        (75855, 1650),
        (15800, 12892),
        (34689, 3669),
        (33678, 2733),
        (50219, 3464),
        (51434, 12701),
        (64742, 12685),
        (64285, 1706),
        (40641, 3475),
        (76366, 537),
        (29554, 2722),
        (59251, 7239),
        (24412, 14699),
        (70620, 1238),
        (20017, 12537),
        (51444, 14389),
        (21882, 8908),
        (56180, 11189),
        (75856, 1361),
        (75857, 1691),
        (45783, 8493),
        (78217, 1886),
        (64948, 14357),
        (48785, 8701),
        (75860, 1073),
        (75871, 1485),
        (51466, 11099),
        (75828, 330),
        (56982, 6236),
        (78261, 1179),
        (3522, 4610),
        (72898, 7784),
        (76168, 5803),
        (71337, 3695),
        (74225, 4151),
        (54985, 6682),
        (71341, 706),
        (70769, 899),
        (73211, 1223),
        (71765, 3240),
        (72732, 0),
        (73030, 1102),
        (74214, 1782),
        (70512, 12951),
        (72743, 4675),
        (71598, 6625),
        (52795, 10691),
        (71040, 1003),
        (70316, 1361),
        (75795, 7712),
        (72893, 2360),
        (69686, 1217),
        (47849, 3272),
        (66232, 9555),
        (72566, 3810),
        (74052, 943),
        (71586, 2914),
        (53168, 10875),
        (73009, 10854),
        (68006, 9051),
        (74207, 10764),
        (41788, 8160),
        (70104, 8469),
        (68077, 12739),
        (70106, 9051),
        (69031, 8455),
        (64279, 1106),
        (49805, 10025),
        (19987, 9826),
        (69637, 9692),
        (73768, 7206),
        (53193, 11403),
        (73204, 2291),
        (68979, 7650),
        (67763, 4123),
        (69968, 8338),
        (37323, 10370),
        (70108, 13326),
        (50355, 2805),
        (72564, 2052),
        (51720, 14831),
        (69774, 2756),
        (61718, 13005),
        (73489, 4518),
        (51772, 10208),
        (12574, 11623),
        (16782, 5838),
        (35905, 4310),
        (70734, 7413),
        (69772, 3517),
        (3576, 4607),
        (70382, 8018),
        (69799, 4824),
        (74027, 1384),
        (73244, 8840),
        (48491, 4598),
        (70099, 2341),
        (73777, 1939),
        (67740, 3729),
        (72108, 6602),
        (70529, 3806),
        (71721, 4246),
        (77547, 3368),
        (73781, 6415),
        (71732, 3588),
        (72298, 4143),
        (70871, 881),
        (77546, 7300),
        (61335, 3962),
        (62775, 2072),
        (70888, 1916),
        (48695, 889),
        (71731, 4997),
        (29748, 14733),
        (17939, 8908),
        (27288, 15572),
        (54750, 14752),
        (52771, 16903),
        (37357, 6066),
        (18435, 18542),
        (35576, 5361),
        (52945, 6168),
        (33412, 9594),
        (19749, 12334),
        (3886, 16903),
        (13059, 17735),
        (15803, 18917),
        (37514, 15961),
        (10186, 9432),
        (28367, 9976),
        (3881, 15478),
        (33417, 14964),
        (36088, 15961),
        (10800, 18166),
        (28041, 14964),
        (14775, 14964),
        (37513, 13059),
        (76757, 3266),
        (11066, 14964),
        (76898, 5170),
        (68072, 6803),
        (1565, 19025),
        (3865, 15478),
        (3210, 13059),
        (25862, 8197),
        (14768, 15478),
        (15706, 14752),
        (9054, 12898),
        (3834, 15478),
        (37755, 16875),
        (3064, 19239),
        (26980, 9459),
        (35621, 8756),
        (7456, 20250),
        (54110, 9017),
        (3189, 12485),
        (18130, 12485),
        (15805, 10827),
        (38612, 13396),
        (33405, 12485),
        (3405, 12485),
        (31026, 10689),
        (42055, 8908),
        (25622, 10689),
        (33169, 10689),
        (3927, 16875)
    ]
    
    # Вставляем данные, если таблица пуста
    cursor.execute("SELECT COUNT(*) FROM premiums")
    if cursor.fetchone()[0] == 0:
        cursor.executemany("INSERT INTO premiums (tab_number, premium) VALUES (?, ?)", premium_data)
    
    conn.commit()
    conn.close()

def get_premium(tab_number):
    conn = sqlite3.connect("premiums.db")
    cursor = conn.cursor()
    
    # Проверяем лимит запросов
    current_date = datetime.now().date()
    cursor.execute("SELECT lookup_count, last_reset FROM lookup_limits WHERE tab_number = ?", (tab_number,))
    result = cursor.fetchone()
    
    if result:
        lookup_count, last_reset = result
        if last_reset != current_date:
            lookup_count = 0
            cursor.execute("UPDATE lookup_limits SET lookup_count = ?, last_reset = ? WHERE tab_number = ?", 
                          (lookup_count, current_date, tab_number))
        if lookup_count >= 6:
            next_reset = datetime.combine(current_date, datetime.min.time()) + timedelta(days=1)
            wait_time = next_reset - datetime.now()
            conn.close()
            return (f"Превышен лимит запросов (6 за сутки). Подождите {wait_time.seconds // 3600} часов {(wait_time.seconds % 3600) // 60} минут.",)
    else:
        cursor.execute("INSERT INTO lookup_limits (tab_number, last_reset) VALUES (?, ?)", (tab_number, current_date))
        lookup_count = 0
    
    # Увеличиваем счетчик запросов
    cursor.execute("UPDATE lookup_limits SET lookup_count = lookup_count + 1 WHERE tab_number = ?", (tab_number,))
    
    # Получаем премию
    cursor.execute("SELECT premium FROM premiums WHERE tab_number = ?", (tab_number,))
    premium_result = cursor.fetchone()
    
    conn.commit()
    conn.close()
    return (premium_result[0],) if premium_result else ("Табельный номер не найден",)

# Инициализация базы данных при первом запуске
if __name__ == "__main__":
    init_db()
